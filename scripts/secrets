#!/usr/bin/env python3

import plumbum.cli as cli

from plumbum import local as sh


class App(cli.Application):
    '''Hides or reveals secrets encrypted with gpg in the dotfiles repo.'''

    hide_secrets = cli.Flag(
        '--hide',
        help='Compresses and encrypts files inside the $DOTFILES/secrets dir',
    )
    show_secrets = cli.Flag(
        '--show',
        help='Decrypts and extracts secrets to the $DOTFILES/secrets dir',
    )

    base = cli.SwitchAttr(
        '--base',
        str,
        default='secrets',
        help='Set the basename for secret files. Defaults to "secrets"',
    )

    def main(self):
        secrets_archive = f'{self.base}.7z'
        secrets_encrypted_archive = f'{secrets_archive}.gpg'

        _7z = sh['7z']['-aoa', '-y', '-mx9']
        compress = _7z['a']
        decompress = _7z['x']

        count_secrets = sh['find'][self.base, '-type', 'f'] | sh['wc']['-l']
        gpg = sh['gpg2']
        rm = sh['rm']['-rf']

        with sh.cwd(sh.env['DOTFILES']):
            if self.hide_secrets:
                base = sh.cwd / self.base

                if not base.exists():
                    print(f'Secrets directory "{self.base}" does not exist!')
                    print(f'Creating empty directory "{self.base}"')
                    base.mkdir()

                total_secrets = int(count_secrets())

                if total_secrets == 0:
                    print('Skipping since secrets directory is empty')
                else:
                    print('Compressing secrets...')
                    compress(secrets_archive, self.base)

                    if (sh.cwd / secrets_encrypted_archive).exists():
                        print('Removing old encrypted secrets archive...')
                        rm(secrets_encrypted_archive)

                    print('Encrypting secrets with gpg2...')
                    gpg(
                        '--output', secrets_encrypted_archive,
                        '--symmetric', secrets_archive,
                    )

                    print('Removing secrets...')
                    rm(self.base, secrets_archive)

                    print('Done !')
                    print(f'Total secrets: {total_secrets}')

            elif self.show_secrets:
                if not sh.path(secrets_encrypted_archive).exists():
                    print((
                        'Secrets archive '
                        f'"{secrets_encrypted_archive}" '
                        'does not exist'
                    ))
                    print('Run `scripts/secrets --hide` to hide secrets')
                else:
                    print('Decrypting secrets with gpg2...')
                    gpg(
                        '--output', secrets_archive,
                        '--decrypt', secrets_encrypted_archive,
                    )

                    print('Extracting secrets...')
                    decompress(secrets_archive)

                    print('Removing secrets archive...')
                    rm(secrets_archive)

                    print('Done!')
                    print('Total secrets: ' + count_secrets())
            else:
                self.help()


if __name__ == '__main__':
    try:
        App.run()
    except KeyboardInterrupt as e:
        pass
