#!/usr/bin/env python3

import http.server as http
import os
import os.path as path
from socket import gethostname
from socketserver import TCPServer
from subprocess import run
from watchdog.events import FileSystemEventHandler
from watchdog.observers import Observer

IMAGE_NAME = 'resume-builder'
PORT = 8080

observer = None


def is_resume_image_built():
    result = run(f'docker images | rg -q {IMAGE_NAME}', shell=True)
    return result.returncode == 0


def build_resume_image():
    print(f'Building "{IMAGE_NAME}"')
    result = run(['docker', 'build', '--rm', '-t', IMAGE_NAME, '.'])
    return result.returncode == 0


def build_resume():
    if not is_resume_image_built() and not build_resume_image():
        print(f'Unable to build "{IMAGE_NAME}"')
        observer.stop()
        return

    resume_dir = os.getcwd()
    run([
        'docker',
        'run',
        '--rm',
        '-it',
        '-v',
        f'{resume_dir}:/resume',
        IMAGE_NAME,
    ])


class ResumeBuilderEventHandler(FileSystemEventHandler):
    '''Event handler class that runs make whenever resume.tex is updated.'''
    def on_modified(self, event):
        if event.is_directory or event.src_path != './resume.tex':
            return

        run(['clear'])
        build_resume()


def main():
    if not path.exists('build'):
        build_resume()

    observer = Observer()
    observer.schedule(ResumeBuilderEventHandler(), '.')
    observer.start()

    try:
        with TCPServer(("", PORT), http.SimpleHTTPRequestHandler) as server:
            print('Started make server!')
            print((
                'See resume build at '
                f'http://{gethostname()}:{PORT}/build/resume.pdf'
            ))
            server.serve_forever()
    except KeyboardInterrupt:
        print('Stopping watcher.')
        observer.stop()

    observer.join()
    print('Server stopped!')


if __name__ == "__main__":
    main()
